{
	"info": {
		"_postman_id": "f194556f-bee0-4d26-98a9-5590c004668a",
		"name": "Vika3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW_Vika_3",
			"item": [
				{
					"name": "1.login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json ();\r",
									"pm.environment.set (\"token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "Vika",
									"type": "text"
								},
								{
									"key": "password",
									"value": "2122030",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}login",
							"host": [
								"{{url}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.user_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"var scheme = {\r",
									"\"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"person\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"u_age\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"u_name\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"u_age\",\r",
									"        \"u_name\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"qa_salary_after_12_months\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"qa_salary_after_6_months\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"start_qa_salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"person\",\r",
									"    \"qa_salary_after_12_months\",\r",
									"    \"qa_salary_after_6_months\",\r",
									"    \"start_qa_salary\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Schema is valid', function() {\r",
									"    var data = pm.response.json();\r",
									"    tv4.validate(data, scheme);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"var response_salary = jsonData.start_qa_salary;\r",
									"\r",
									"\r",
									"pm.test(\"start_salary*2\", function(){\r",
									"pm.expect(jsonData.qa_salary_after_6_months).to.eql(response_salary*2);\r",
									"}) ;\r",
									"\r",
									"pm.test(\"start_salary*2.9\", function(){\r",
									"pm.expect(jsonData.qa_salary_after_12_months).to.eql(response_salary*2.9);\r",
									"}) ;\r",
									"\r",
									"pm.test(\"start_salary*4\", function(){\r",
									"pm.expect(jsonData.person.u_salary_1_5_year).to.eql(response_salary*4);\r",
									"}) ;\r",
									"\r",
									"pm.environment.set(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);\r",
									"var salary = jsonData.person.u_salary_1_5_year\r",
									"var get_test_user = {\r",
									"    url: 'http://162.55.220.72:5005/get_test_user',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"      'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'formdata',\r",
									"        formdata: [\r",
									"            {key: \"auth_token\", 'value': pm.environment.get(\"token\")},\r",
									"            {key: 'age', 'value': pm.environment.get(\"age\")},\r",
									"            {key: 'name', 'value':pm.environment.get(\"name\")},\r",
									"            {key: 'salary', 'value':pm.environment.get(\"u_salary_1_5_year\")},\r",
									"        ]\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(get_test_user, function (err, response) {console.log (response.json ());\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Vika\",\r\n    \"age\": 25,\r\n    \"salary\": 1000,\r\n    \"auth_token\": \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"var scheme = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Schema is valid', function() {\r",
									"    var data = pm.response.json();\r",
									"    tv4.validate(data, scheme);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"var response_salary = jsonData.salary;\r",
									"\r",
									"pm.test(\"salary\", function(){\r",
									"pm.expect(jsonData.salary[0]).to.eql(response_salary[0])\r",
									"}) ;\r",
									"\r",
									"pm.test(\"salary*2\", function(){\r",
									"pm.expect(+jsonData.salary[1]).to.eql(response_salary[0]*2);\r",
									"}) ;\r",
									"\r",
									"pm.test(\"salary*3\", function(){\r",
									"pm.expect(+jsonData.salary[2]).to.eql(response_salary[0]*3);\r",
									"}) ;\r",
									"\r",
									"pm.test(\"2-й элемент массива salary больше 1-го \", function(){\r",
									"(jsonData.salary[2]>jsonData.salary[1]);\r",
									"}) ;\r",
									"\r",
									"console.log('[2]>[1]',(jsonData.salary[2]>jsonData.salary[1]));\r",
									"\r",
									"pm.test(\"2-й элемент массива salary больше и 0-го\", function(){\r",
									"(jsonData.salary[2]>jsonData.salary[0]);\r",
									"}) ;\r",
									"\r",
									"console.log('[2]>[0]',(jsonData.salary[2]>jsonData.salary[0]));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}new_data",
							"host": [
								"{{url}}new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"var scheme = {\r",
									"   \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"daily_food\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"daily_sleep\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"daily_food\",\r",
									"    \"daily_sleep\",\r",
									"    \"name\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Schema is valid', function() {\r",
									"    var data = pm.response.json();\r",
									"    tv4.validate(data, scheme);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var request_weight= + request.data.weight;\r",
									"pm.test(\" daily_food \", function(){\r",
									"pm.expect(jsonData.daily_food).to.eql(request_weight*0.012,);\r",
									"}) ;\r",
									"console.log (\"daily_food\",request_weight*0.012);\r",
									"\r",
									"pm.test(\" daily_sleep \", function(){\r",
									"pm.expect(jsonData.daily_sleep).to.eql(request_weight*2.5,);\r",
									"}) ;\r",
									"console.log (\"daily_sleep\",request_weight*2.5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
[O								{
									"key": "weight",
									"value": "{{weight}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}test_pet_info",
							"host": [
								"{{url}}test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"var scheme = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"family\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"children\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"children\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"family\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Schema is valid', function() {\r",
									"    var data = pm.response.json();\r",
									"    tv4.validate(data, scheme);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var request_name = request.data.name;\r",
									"var request_age = request.data.age;\r",
									"\r",
									"pm.test(\"name.response=name.request\", function(){\r",
									"   pm.expect(jsonData.name).to.eql(request_name)\r",
									"});\r",
									"\r",
									"pm.test(\"age.response=age.request\", function(){\r",
									"   pm.expect(jsonData.age).to.eql(request_age)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}get_test_user",
							"host": [
								"{{url}}get_test_user"
							],
							"query": [
								{
									"key": "salary",
									"value": "",
									"disabled": true
								},
								{
									"key": "age",
									"value": "",
									"disabled": true
								},
								{
									"key": "name",
									"value": "",
									"disabled": true
								},
								{
									"key": "auth_token",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6.currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"var n=jsonData.length;\r",
									"\r",
									"console.log (n);\r",
									"\r",
									"function getrandomInt(n){\r",
									"    return Math.floor(Math.random()* n)\r",
									"};\r",
									"\r",
									"var random_int = getrandomInt(n);\r",
									"console.log(random_int);\r",
									"\r",
									"var response_item = jsonData[random_int];\r",
									"\r",
									"pm.environment.set(\"curr_code\", response_item.Cur_ID);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}currency",
							"host": [
								"{{url}}currency"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
